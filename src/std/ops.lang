trait Add<Rhs> {
	type Output;
	
	fn add(self, other: Rhs) -> Output;
}

impl Add<number> for number {
	type Output = number;

	fn add(self, other: number) -> number {
		INTRINSIC_ADD_NUM
	}
}

impl Add<string> for string {
	type Output = string;

	fn add(self, other: string) -> string {
		INTRINSIC_ADD_STR
	}
}

trait Sub<Rhs> {
	type Output;

	fn sub(self, other: Rhs) -> Output;
}

impl Sub<number> for number {
	type Output = number;

	fn sub(self, other: number) -> number {
		INTRINSIC_SUB_NUM
	}
}

trait Mul<Rhs> {
	type Output;

	fn mul(self, other: Rhs) -> Output;
}

impl Mul<number> for number {
	type Output = number;

	fn mul(self, other: number) -> number {
		INTRINSIC_MUL_NUM
	}
}

trait Div<Rhs> {
	type Output;

	fn div(self, other: Rhs) -> Output;
}

impl Div<number> for number {
	type Output = number;

	fn div(self, other: number) -> number {
		INTRINSIC_DIV_NUM
	}
}

trait Exp<Rhs> {
	type Output;

	fn exp(self, other: Rhs) -> Output;
}

impl Exp<number> for number {
	type Output = number;

	fn exp(self, other: number) -> number {
		INTRINSIC_EXP_NUM
	}
}

trait Eq<Rhs> {
	fn eq(self, other: Rhs) -> bool;
}

impl Eq<number> for number {
	fn eq(self, other: number) -> bool {
		INTRINSIC_EQ_NUM
	}
}

impl Eq<bool> for bool {
	fn eq(self, other: bool) -> bool {
		INTRINSIC_EQ_BOOL
	}
}

impl Eq<string> for string {
	fn eq(self, other: string) -> bool {
		INTRINSIC_EQ_STR
	}
}
